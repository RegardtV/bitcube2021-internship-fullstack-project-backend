// <auto-generated />
using System;
using FullStack.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FullStack.Data.Migrations
{
    [DbContext(typeof(FullStackDbContext))]
    [Migration("20210331071020_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FullStack.Data.Entities.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 10,
                            Date = new DateTime(2020, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cozy and luxurious apartment ideal for newlyweds",
                            Featured = true,
                            Header = "2 Bedroom Luxury Apartment",
                            Price = 1320000m,
                            ProvinceId = 5,
                            State = "Live",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 3,
                            Date = new DateTime(2021, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has a big living room and nice view of the city...",
                            Featured = false,
                            Header = "Large family house that sleeps 6",
                            Price = 2000000m,
                            ProvinceId = 2,
                            State = "Live",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CityId = 6,
                            Date = new DateTime(2021, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "King Louis IV used to live here",
                            Featured = false,
                            Header = "Mansion fit for a king",
                            Price = 11450000m,
                            ProvinceId = 3,
                            State = "Hidden",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CityId = 9,
                            Date = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Also includes a big garden for those who love gardening",
                            Featured = true,
                            Header = "Double story, 5 bedroom house with granny flat",
                            Price = 4500000m,
                            ProvinceId = 5,
                            State = "Live",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            Date = new DateTime(2021, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Situated in up-market area overlooking the city",
                            Featured = false,
                            Header = "Bachelor plat ideal for students",
                            Price = 900000m,
                            ProvinceId = 1,
                            State = "Live",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            Date = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Recently repainted",
                            Featured = true,
                            Header = "2 bedroom, 2 bathroom duplex",
                            Price = 1050000m,
                            ProvinceId = 1,
                            State = "Live",
                            UserId = 5
                        },
                        new
                        {
                            Id = 7,
                            CityId = 7,
                            Date = new DateTime(2020, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Set in one of the most secure, private and exclusive estates in Uzili Upper. High Uzili is a sought-after Security Estate of 19 architecturally designed homes with the emphasis on security, style and peace and boasts natural Fynbos gardens and private walkways.",
                            Featured = true,
                            Header = "4 Bedroom House for Sale in Uzuli",
                            Price = 5600000m,
                            ProvinceId = 4,
                            State = "Live",
                            UserId = 6
                        },
                        new
                        {
                            Id = 8,
                            CityId = 3,
                            Date = new DateTime(2020, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This Face Brick property consists of the following: 2 Bedrooms equipped with built-in cupboards and carpets, 2 Bathroom an Open-plan lounge, dining room, and a kitchen. A private garden in a very neat condition. Double Hollywood garage.",
                            Featured = false,
                            Header = "2 Bedroom Town House for sale in Langenhovenpark",
                            Price = 860000m,
                            ProvinceId = 2,
                            State = "Live",
                            UserId = 6
                        },
                        new
                        {
                            Id = 9,
                            CityId = 3,
                            Date = new DateTime(2020, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spacious 205 sq and such a neat unit and complex near doctors, church and shopping center. Lots of space inside and so many cupboards. Tandem garage! Call now!!!!",
                            Featured = false,
                            Header = "3 Bedroom Townhouse for Sale in Pellissier",
                            Price = 1249000m,
                            ProvinceId = 2,
                            State = "Hidden",
                            UserId = 6
                        },
                        new
                        {
                            Id = 10,
                            CityId = 5,
                            Date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Attention all young couples looking for an amazing start-up home. This beautiful two-bedroom one bathroom unit is perfect for a small family looking to settle. Situated near all major amenities you cannot ask for more, from good schools to better shopping centers this location has it all.",
                            Featured = false,
                            Header = "2 Bedroom Townhouse for Sale in Groenboom",
                            Price = 1000000m,
                            ProvinceId = 3,
                            State = "Live",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("FullStack.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "East London",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Port Elizabeth",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bloemfontein",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bethlehem",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Johannesburg",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "Soweto",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Durban",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pietermaritzburg",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cape Town",
                            ProvinceId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "Paarl",
                            ProvinceId = 5
                        });
                });

            modelBuilder.Entity("FullStack.Data.Entities.FavouriteJoin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AdvertId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AdvertId");

                    b.HasIndex("AdvertId");

                    b.ToTable("FavouriteJoin");
                });

            modelBuilder.Entity("FullStack.Data.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Free State"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gauteng"
                        },
                        new
                        {
                            Id = 4,
                            Name = "KwaZulu-Natal"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Western Cape"
                        });
                });

            modelBuilder.Entity("FullStack.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdminRole")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AdminRole = true,
                            Email = "properproperties1@gmail.com",
                            FirstName = "John",
                            LastName = "Smith",
                            Locked = false,
                            Password = "ppAdmin1"
                        },
                        new
                        {
                            Id = 3,
                            AdminRole = true,
                            Email = "properproperties2@gmail.com",
                            FirstName = "Johan",
                            LastName = "Smit",
                            Locked = false,
                            Password = "ppAdmin2"
                        },
                        new
                        {
                            Id = 1,
                            AdminRole = false,
                            Email = "regardtvisagie@gmail.com",
                            FirstName = "Regardt",
                            LastName = "Visagie",
                            Locked = false,
                            Password = "Reg14061465"
                        },
                        new
                        {
                            Id = 4,
                            AdminRole = false,
                            Email = "mk@yahoo.com",
                            FirstName = "Michelle",
                            LastName = "Koorts",
                            Locked = false,
                            Password = "Koorts123"
                        },
                        new
                        {
                            Id = 5,
                            AdminRole = false,
                            Email = "pieterj@yhotmail.com",
                            FirstName = "Pieter",
                            LastName = "Joubert",
                            Locked = false,
                            Password = "Jouba1987"
                        },
                        new
                        {
                            Id = 6,
                            AdminRole = false,
                            Email = "cs@ymail.com",
                            FirstName = "Chulu",
                            LastName = "Sibuzo",
                            Locked = false,
                            Password = "Chulu1982"
                        });
                });

            modelBuilder.Entity("FullStack.Data.Entities.Advert", b =>
                {
                    b.HasOne("FullStack.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FullStack.Data.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FullStack.Data.Entities.User", "User")
                        .WithMany("Adverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Province");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FullStack.Data.Entities.FavouriteJoin", b =>
                {
                    b.HasOne("FullStack.Data.Entities.Advert", "Advert")
                        .WithMany("FavouriteJoins")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FullStack.Data.Entities.User", "User")
                        .WithMany("FavouriteJoins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FullStack.Data.Entities.Advert", b =>
                {
                    b.Navigation("FavouriteJoins");
                });

            modelBuilder.Entity("FullStack.Data.Entities.User", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("FavouriteJoins");
                });
#pragma warning restore 612, 618
        }
    }
}
